#+PROPERTY: header-args :tangle yes
* Emacs config
This file is tangled and the results are sources by =init.el= upon
start.

Setup package and add package archives.
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

 (straight-use-package 'use-package)
 (setq straight-use-package-by-default t)
#+END_SRC

* Editing this file
** Opening
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-x x e") 'config-visit)
#+END_SRC

** Reloading
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-x x r") 'config-reload)
#+END_SRC

* Org Mode
** Org config
#+BEGIN_SRC emacs-lisp
    (use-package org
      :after(jupyter ess)
      :config
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (shell . t)
  ;       (julia . t)
         (python . t)
         (jupyter . t)))

      (setq org-directory "~/Dropbox/org")
      (setq org-src-fontify-natively t)
      (setq org-src-tab-acts-natively t)
      (setq org-confirm-babel-evaluate nil)
      (setq org-export-with-smart-quotes t)
      (setq org-src-window-setup 'current-window)
      (setq org-hide-leading-stars 't)

      ;; Text
      ;; (setq org-startup-indented t) this breaks some weird timer
      (setq org-indent-indentation-per-level 1)
      (setq org-adapt-indentation nil)
      (setq org-hide-emphasis-markers t)

      ;; Images
      (setq org-display-inline-images t) 
      (setq org-redisplay-inline-images t) 
      (setq org-startup-with-inline-images "inlineimages")

      ;; Avoid conflicts with :async keyword
      (setq ob-async-no-async-languages-alist '("jupyter-python" 
                                                "jupyter-julia"))
      (add-hook 'org-mode-hook 'org-indent-mode))
#+END_SRC

** Personal org file
#+BEGIN_SRC emacs-lisp
  (defun org-visit ()
    (interactive)
    (find-file (concat org-directory "/main.org")))
  (global-set-key (kbd "C-x x o") 'org-visit)
#+END_SRC
** Org todo/agenda
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "STARTED(s!)" "|" "ABANDONED(b@)" "DONE(d!)"))))
  (setq org-log-done t)
  ;; Org capture
  (setq org-default-notes-file (concat org-directory "/remember.org"))
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC
** Org export
#+BEGIN_SRC emacs-lisp
  (use-package ox-hugo)
  (use-package ox-pandoc)
  (use-package ox-reveal
    :after (htmlize))
#+END_SRC

** Org babel
#+BEGIN_SRC emacs-lisp
  (use-package ob-async)
#+END_SRC

* Aesthetics
** Font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :family "Monoid" :height 120)
#+END_SRC

** Configure cursor
Make the cursor more minimalistic.
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-in-non-selected-windows 1)
  (blink-cursor-mode 0)
  (setq-default cursor-type 'bar)
#+END_SRC

** Zenburn theme
   Zenburn theme <3
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :config
    (enable-theme 'zenburn)
    (setq zenburn-use-variable-pitch t)
    (setq zenburn-scale-org-headlines t)
    (setq zenburn-scale-outline-headlines t))
#+END_SRC

** Rainbow delimiters
   #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters
	:config
	(add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC

** Mode-line
~Mini-modeline~ and ~smart-mode-line~. Way less buggy than [[https://github.com/tautologyclub/feebleline][Feebleline]] and also frees up real estate.
#+begin_src emacs-lisp
    (use-package smart-mode-line
      :config
      (sml/setup))

    (use-package mini-modeline
      :after smart-mode-line
      :config
      (mini-modeline-mode t))
#+end_src
* Navigation and ergonomics
** Selectrum
For powerful ~M-x~, ~C-x + C-f~ etc.
#+begin_src emacs-lisp
  (use-package selectrum
    :config
    (selectrum-mode +1))
#+end_src

** Prescient
More intelligent search with [[*Selectrum][Selectrum]].
#+begin_src emacs-lisp
  (use-package prescient
    :config 
    (prescient-persist-mode +1))

  (use-package selectrum-prescient
    :after (selectrum prescient)
    :config
    (selectrum-prescient-mode +1))
#+end_src

** Hungry delete
Avoids cleaning up white space.                   
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))
#+END_SRC
** Smoother scrolling
This makes the buffer content "stream" in and out of focus instead of the default janky jumps.
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** Yes-or-no-prompts
No need to ever be verbose again. Simplify confirmation prompts.
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Follow splits
To avoid unnecessary =C-2 C-o= or =C-3 C-o= everytime I split a window.

#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

** Always kill current buffer 
To avoid unnecessary confirmation when doing =C-x k= which I have never used to kill 
a buffer I am not currently in.
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    "Kills the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC

* Programming
** Git

*** Magit
Git from Emacs!
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (setq magit-diff-use-overlays nil)
    (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC

*** Diff-hl
Hightlight Git diffs in fringes.
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :config
    (global-diff-hl-mode)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+END_SRC

** Eglot
#+begin_src emacs-lisp :tangle no
  (use-package eglot)
  (use-package eglot-jl
    :after (eglot))
#+end_src
** Jupyter
For connecting ~org-babel~ to Jupyter sessions.
#+BEGIN_SRC emacs-lisp 
  (use-package jupyter)
#+END_SRC

** Ess
Required for Julia in ~org-babel~.
#+BEGIN_SRC emacs-lisp 
  (use-package ess
    :init 
    (setq inferior-julia-program-name "/usr/local/bin/julia"))
#+END_SRC

** Language server
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "M-p")
    :commands lsp
    :custom
    (lsp-enable-snippet 'f)
    (lsp-auto-guess-root nil)
    (lsp-prefer-flymake nil)
    :hook ((python-mode) . lsp)
     :config
     (lsp-register-custom-settings '(("pyls.plugins.pyls_mypy.enabled" t t)))
     (lsp-register-client
      (make-lsp-client :new-connection (lsp-tramp-connection "~/anaconda3/bin/pyls")
                       :major-modes '(python-mode)
                       :remote? t
                       :server-id 'pyls-remote)))

  (use-package lsp-ui
    :ensure t
    :after (lsp-mode))

  (use-package company-lsp
    :ensure t
    :after (lsp-mode)
    :config
    (setq company-lsp-enable-snippet t)
    (push 'company-lsp company-backends))


#+END_SRC
* Tweaks
** Landing page 
#+begin_src emacs-lisp
  ;;(org-agenda nil "w")
;;  (delete-other-windows)
#+end_src

** Custom key bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-w" 'backward-kill-word)
  (global-set-key "\C-x\C-k" 'kill-region)
  (global-set-key "\M-o" 'other-window)
  (global-set-key "\M-;" 'comment-dwim)
#+END_SRC


** Terminal
#+BEGIN_SRC emacs-lisp
  (defvar term-shell "/bin/bash")
#+END_SRC

** Utf-8
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC    
** Remove clutter
Emacs truly comes with a lot of unnecessary stuff, and that stuff 
has to go for more screen real estate.

*** Remove all bars
#+BEGIN_SRC emacs-lisp
  (menu-bar-no-scroll-bar)
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (fringe-mode 1)
;  (setq left-fringe-width 10)
  (setq right-fringe-width 10)
#+END_SRC

** Stop Emacs backups
Ok fine. It can make backup files, but at one location
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
#+END_SRC

** Open links in Firefox
Instead of default chrome.
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-firefox
        browse-url-new-window-flag  t
        browse-url-firefox-new-window-is-tab t)
#+END_SRC

** Ignore bell
Useful on Windows I guess.
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC



** Spell checking
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'latex-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

** Speedup tramp
Having this on causes [[https://www.emacswiki.org/emacs/RecentFiles][issues]] with Tramp. Speedups from [[https://www.gnu.org/software/emacs/manual/html_node/tramp/Frequently-Asked-Questions.html][here]] and [[https://www.reddit.com/r/emacs/comments/320cvb/projectile_slows_tramp_mode_to_a_crawl_is_there_a/][here]].
#+BEGIN_SRC emacs-lisp
    ;; supposed to ignore version control
      (setq vc-ignore-dir-regexp
            (format "\\(%s\\)\\|\\(%s\\)"
                    vc-ignore-dir-regexp
                    tramp-file-name-regexp))

  
      (setq tramp-verbose 1)
      ; (setq vc-handled-backends '(Git))
      (setq vc-handled-backends nil)
      (setq recentf-auto-cleanup 'never)
      (setq tramp-completion-reread-directory-timeout nil)

      ;; disable auto saving
      (add-to-list 'backup-directory-alist
                   (cons tramp-file-name-regexp nil))

    ;; (defadvice projectile-project-root (around ignore-remote first activate)
    ;; (unless (file-remote-p default-directory) ad-do-it)) 
  (setq tramp-ssh-controlmaster-options nil)
#+END_SRC
* Misc
** Htmlize
  Required by [[*Org export][ox-reveal]].
  #+begin_src emacs-lisp
  (use-package htmlize)
  #+end_src


  #+begin_src julia
  print("hi")
  #+end_src
