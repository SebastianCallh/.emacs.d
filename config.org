* Emacs config
  This file is tangled and the results are sources by =init.el= upon start. 

** Editing this file
*** Opening
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun config-visit ()
	(interactive)
	(find-file "~/.emacs.d/config.org"))
      (global-set-key (kbd "C-c c e") 'config-visit)
    #+END_SRC

*** Reloading
  #+BEGIN_SRC emacs-lisp :tangle yes
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c c r") 'config-reload)
  #+END_SRC

** Packages
  Setup package and add package archives.
  #+BEGIN_SRC emacs-lisp :tangle yes
	;; Set up package 
	(require 'package)
	(setq package-archives
	  '(("gnu"         . "http://elpa.gnu.org/packages/")
		("original"    . "http://tromey.com/elpa/")
		("org"         . "http://orgmode.org/elpa/")
		("melpa"       . "http://melpa.milkbox.net/packages/")))
	(package-initialize)
  #+END_SRC

*** Org Mode
**** Org Mode
***** Some basic settings.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq org-src-fontify-natively t)
     (setq org-src-tab-acts-natively t)
     (setq org-confirm-babel-evaluate nil)
     (setq org-export-with-smart-quotes t)
     (setq org-src-window-setup 'current-window)

     (setq ob-async-no-async-languages-alist '("ipython"))
     (add-hook 'org-mode-hook
	       '(lambda ()
		  (visual-line-mode 1)))
   #+END_SRC
***** Org bullets
   #+BEGIN_SRC emacs-lisp :tangle yes  
     (use-package org-bullets
       :ensure t
       :config
	 (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
   #+END_SRC

***** Org todo/agenda
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq org-todo-keywords
	   (quote ((sequence "TODO(t)" "|" "ABANDONED(b)" "DONE(d)"))))
     (setq org-log-done t)
     ;; (set-time-zone-rule "GMT-2")
     ;; (setq org-agenda-files (list "~/org/cal/schedule.org"
     ;; 			     "~/org/cal/spare-time.org"
     ;; 			     "~/org/cal/self-study.org"
     ;; 			     "~/org/cal/tdde15.org"
     ;; 			     "~/org/cal/vvp.org"
     ;; 			     "~/org/vvp.org"
     ;; 			     "~/org/tdde15.org"
     ;; 			     "~/org/master-explorer.org"
     ;; 			     "~/org/course-scalpel.org"))
     ;; Org capture
     (setq org-default-notes-file (concat org-directory "/remember.org"))
     (define-key global-map "\C-cr" 'org-capture)
     (global-set-key (kbd "C-c a") 'org-agenda)
   #+END_SRC

***** Org babel
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package org
       :ensure t
       :config

       ;; active Babel languages
       (org-babel-do-load-languages
	'org-babel-load-languages
	'((R . t)
	  (python . t)
	  (ipython . t)
	  (shell . t)
	  (emacs-lisp . t))))
  #+END_SRC

  #+RESULTS:

**** Org Ref
 #+BEGIN_SRC emacs-lisp :tangle  yes
   (setq org-latex-prefer-user-labels t)
   (use-package org-ref
     :ensure t)
 #+END_SRC
 
**** Org Gcal
  #+BEGIN_SRC emacs-lisp :tangle  yes
    ;; (use-package org-gcal
    ;;   :ensure t
    ;;   :config 
    ;;   ((load "~/.emacs.d/secret/org-gcal-secrets.el") 
    ;;    (setq org-gcal-file-alist
    ;;       '(("t377lbbp1qucc267fq4957krb7langpe@import.calendar.google.com" .  "~/org/cal/schedule.org")
    ;; 	("6f72rkup96etebb0a0e0nk5a2o@group.calendar.google.com" .  "~/org/cal/spare-time.org")
    ;; 	("6rvcin1ktdh68ictmeuk4h39l4@group.calendar.google.com" . "~/org/cal/self-study.org")        
    ;; 	("pippr22reu69qqm7vqirj126o4@group.calendar.google.com" .  "~/org/cal/tdde15.org")
    ;; 	("iof5g7t7bl4jb39dd47uekdhsc@group.calendar.google.com" .  "~/org/cal/vvp.org")
    ;; 	))))

    ;; ;; Sync on loading agenda and when capturing
    ;; (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
    ;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
  #+END_SRC

*** Company 
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package company
	 :ensure t)
       (setq company-idle-delay 0.1)
       (setq company-tooltip-limit 10)
       (setq company-minimum-prefix-length 3)
       (setq company-tooltip-flip-when-above t)
       (add-hook 'after-init-hook 'global-company-mode)
     #+END_SRC
 
*** Ido
 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package flx-ido
     :ensure t)
   (ido-mode 1)
   (ido-everywhere 1)
   (flx-ido-mode 1)
   ;; disable ido faces to see flx highlights.
   (setq ido-enable-flex-matching t)
   (setq ido-use-faces nil)
 #+END_SRC

*** Smex
 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package smex
     :ensure t)
   (smex-initialize)
   (global-set-key (kbd "C-x C-m") 'smex)
   (global-set-key (kbd "M-X") 'smex-major-mode-commands)
 #+END_SRC

*** Magit 
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package magit
       :ensure t)

     (setq magit-diff-use-overlays nil)
     (global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC

*** Avy
  Amazing tool for moving to that place that you want to be in a buffer. 
  Mnemonic for keybind is 'character query.
  #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package avy
    :ensure t
    :bind
      ("C-q" . avy-goto-char))
  #+END_SRC

*** Projectile 
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package projectile
      :ensure t)
    (projectile-global-mode +1)
    (define-key projectile-mode-map (kbd "M-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  #+END_SRC

*** Undo Tree
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package undo-tree
      :ensure t)
      (global-undo-tree-mode)
      (global-set-key (kbd "C--") 'undo)
      (global-set-key (kbd "C-+") 'redo)
  #+END_SRC

*** Dimmed
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package dimmer
      :ensure t)
    (setq dimmer-fraction 0.3)
    (dimmer-mode)
  #+END_SRC

*** Rainbow mode
    Shows hex colours in colour.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package rainbow-mode
	:ensure t
	:init
	(add-hook 'prog-mode-hook 'rainbow-mode))
    #+END_SRC

*** Telephone line
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package telephone-line
	:ensure t)
      (telephone-line-mode)
    #+END_SRC

*** Programming
     This section contains configurations and packages primarily for improving the life as a programmer.
**** Language server 
       #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package lsp-mode
	   :ensure t
	   :config

	   ;; make sure we have lsp-imenu everywhere we have LSP
	   (require 'lsp-imenu)
	   (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)  
	   ;; get lsp-python-enable defined
	   ;; NB: use either projectile-project-root or ffip-get-project-root-directory
	   ;;     or any other function that can be used to find the root directory of a project
	   (lsp-define-stdio-client lsp-python "python"
				    #'projectile-project-root
				    '("pyls"))

	   ;; make sure this is activated when python-mode is activated
	   ;; lsp-python-enable is created by macro above 
	   (add-hook 'python-mode-hook
		     (lambda ()
		       (lsp-python-enable)))

	   ;; lsp extras
	   (use-package lsp-ui
	     :ensure t
	     :config
	     (setq lsp-ui-sideline-ignore-duplicate t)
	     (add-hook 'lsp-mode-hook 'lsp-ui-mode))

	   ;; (use-package lsp-haskel
	   ;;   :ensure t
	   ;;   :config
	  ;;    (add-hook 'lsp-mode-hook 'lsp-ui-mode)
	    ;;  (add-hook 'haskell-mode-hook #'lsp-haskell-enable)
	   ;;   (add-hook 'haskell-mode-hook 'flycheck-mode))

	   ;; ;; (use-p
	   ;; package company-lsp
	   ;;   :config
	   ;;   (push 'company-lsp company-backends))

	   ;; ;
						 ; NB: only required if you prefer flake8 instead of the default
	   ;; send pyls config via lsp-after-initialize-hook -- harmless for
	   ;; other servers due to pyls key, but would prefer only sending this
	   ;; when pyls gets initialised (:initialize function in
	   ;; lsp-define-stdio-client is invoked too early (before server
	   ;; start)) -- cpbotha
	   (defun lsp-set-cfg ()
	     (let ((lsp-cfg `(:pyls (:configurationSources ("flake8")))))
	       ;; TODO: check lsp--cur-workspace here to decide per server / project
	       (lsp--set-configuration lsp-cfg)))

	   (add-hook 'lsp-after-initialize-hook 'lsp-set-cfg))
       #+END_SRC

**** Flycheck
       #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package flycheck
	   :ensure t
	   :init (global-flycheck-mode))
	 (add-hook 'after-init-hook #'global-flycheck-mode)
       #+END_SRC
**** Hungry delete
     Avoids cleaning up white space.                   
      #+BEGIN_SRC emacs-lisp :tangle yes
	(use-package hungry-delete
	  :ensure t
	  :config
	  (global-hungry-delete-mode))
      #+END_SRC
**** Programming languages
***** Haskell
	#+BEGIN_SRC emacs-lisp :tangle yes
	  (use-package dante
		:ensure t
		:after haskell-mode
		:commands 'dante-mode
		:init
		(add-hook 'haskell-mode-hook 'dante-mode)

		(add-hook 'haskell-mode-hook 'flycheck-mode)
		;; OR:
		;; (add-hook 'haskell-mode-hook 'flymake-mode)
		)
	  ;; (use-package haskell-interactive-mode
	  ;;   :ensure t)
	  ;; (use-package haskell-process
	  ;;   :ensure t)

	  ;; (setq tags-revert-without-query 1)
	  ;; (setq haskell-tags-on-save t)
	   (setq haskell-stylish-on-save t)
	  ;; (add-hook 'haskell-mode-hook 'interactive-haskell-mode)

	   (custom-set-variables
		'(haskell-process-suggest-remove-import-lines t)
		'(haskell-process-auto-import-loaded-modules t)
		'(haskell-process-log t))
       #+END_SRC

***** PureScript
       #+BEGIN_SRC emacs-lisp :tangle yes
		 ;;	(eval-after-load 'flycheck 
		 ;;	  '(flycheck-purescript-setup))
		 (use-package psc-ide
		   :ensure t)
		 (setq psc-ide-purs-executable  "~/.nvm/versions/node/v10.10.0/bin/purs")
		 (add-hook 'purescript-mode-hook
				   (lambda ()
					 (psc-ide-mode)
					 (company-mode)
					 (flycheck-mode)
					 (customize-set-variable 'psc-ide-add-import-on-completion t)
					 (haskell-indentation-mode)))
		 ;;		    (turn-on-purescript-indentation)
       #+END_SRC
	   
***** Python
      #+BEGIN_SRC emacs-lisp :tangle yes
		(use-package ob-async
		  :ensure t)

		(use-package ob-ipython
		  :ensure t)

		(use-package pyvenv
		  :ensure t)
      #+END_SRC
***** Rust
      #+BEGIN_SRC emacs-lisp :tangle yes 
	(use-package flycheck-rust
	  :ensure t)

	(use-package rust-mode
	  :ensure t)

	(use-package racer
	  :ensure t
	  :config

	  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
	  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
	  (add-hook 'rust-mode-hook #'racer-mode)
	  (add-hook 'racer-mode-hook #'eldoc-mode)
	  (add-hook 'racer-mode-hook #'company-mode)
	  (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
	  (setq company-tooltip-align-annotations t)
	  (setq racer-cmd (concat (getenv "HOME") "/.cargo/bin/racer"))
	  (setq racer-rust-src-path (concat (getenv "HOME") "/.rust-dev/rust/src")))
      #+END_SRC

*** Dashboard
    Remove the standard dashboard and add a new cool one.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package dashboard
	:ensure t)
      (setq inhibit-startup-screen t)
      (dashboard-setup-startup-hook)
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
      (setq dashboard-banner-logo-title "")
      (setq dashboard-startup-banner "~/.emacs.d/images/lambda.png")
      (add-to-list 'dashboard-items '(agenda) t)
      (setq show-week-agenda-p t)
      (setq dashboard-items '((recents  . 5)
			      (bookmarks . 5)
			      (agenda . 5)
			      (projects . 5)))
    #+END_SRC
*** Multiple cursors
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package multiple-cursors
	:ensure t
	:bind 
	("C-c c l" . mc/edit-lines))
    #+end_src

*** Expand region
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package expand-region
	:ensure t
	:bind 
	("C-0" . 'er/expand-region))
    #+end_src

 #+BEGIN_SRC emacs-lisp :tangle  yes
   (use-package ein
     :ensure t)
 #+END_SRC
** Tweaks
*** terminal
    Setup =zsh= with quick access keybind.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defvar term-shell "/bin/zsh")
      (defadvice ansi-term (before force-bash)
	(interactive (list term-shell)))
      (ad-activate 'ansi-term)
      (global-set-key (kbd "<C-return>") 'ansi-term)
    #+END_SRC
*** Utf-8
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq locale-coding-system 'utf-8)
      (set-terminal-coding-system 'utf-8)
      (set-keyboard-coding-system 'utf-8)
      (set-selection-coding-system 'utf-8)
      (prefer-coding-system 'utf-8)
    #+END_SRC
    
*** Remove clutter
    Emacs truly comes with a lot of unnecessary stuff, and that stuff 
    has to go for more screen real estate.

**** Remove all bars
    #+BEGIN_SRC emacs-lisp :tangle yes
      (menu-bar-no-scroll-bar)
      (tool-bar-mode 0)
      (menu-bar-mode 0)
      (set-face-attribute 'vertical-border nil :foreground "#282828")
    #+END_SRC

*** Stop Emacs backups
    Ok fine. It can make backup files, but at one location.
    #+BEGIN_SRC emacs-lisp :tangle yes
      ;; Do not clutter everything with .file~
      (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
    #+END_SRC

*** Open links in Firefox
    Instead of default chrome.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq browse-url-browser-function 'browse-url-firefox
	    browse-url-new-window-flag  t)
    #+END_SRC

*** Configure cursor
    Make the cursor more minimalistic. Since cursors in inactive buffers 
    don't work with dimmer, they're not shown. 
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default cursor-in-non-selected-windows nil)
      (blink-cursor-mode 0)
      (setq cursor-type 'bar)
    #+END_SRC

*** Theme
    Darktooth theme <3
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package darktooth-theme
	:ensure t)
    #+END_SRC

*** Smoother scrolling
    This makes the buffer content "stream" in and out of focus instead of the default janky jumps.
    #+BEGIN_SRC emacs-lisp :tangle yes
       (setq scroll-conservatively 100)
    #+END_SRC

*** Yes-or-no-prompts
    No need to ever be verbose again. Simplify confirmation prompts.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defalias 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

*** Ignore bell
    Useful on Windows I guess.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq ring-bell-function 'ignore)
    #+END_SRC

*** Follow splits
    To avoid unnecessary =C-2 C-o= or =C-3 C-o= everytime I split a window.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun split-and-follow-horizontally ()
	(interactive)
	(split-window-below)
	(balance-windows)
	(other-window 1))
      (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

      (defun split-and-follow-vertically ()
	(interactive)
	(split-window-right)
	(balance-windows)
	(other-window 1))
      (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
    #+END_SRC

*** Always kill current buffer 
    To avoid unnecessary confirmation when doing =C-x k= which I have never used to kill 
    a buffer I am not currently in.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun kill-current-buffer ()
	"Kills the current buffer."
	(interactive)
	(kill-buffer (current-buffer)))
      (global-set-key (kbd "C-x k") 'kill-current-buffer)
    #+END_SRC
*** Custom keybinds
    #+BEGIN_SRC emacs-lisp :tangle yes
      (global-set-key "\C-w" 'backward-kill-word)
      (global-set-key "\C-x\C-k" 'kill-region)
      (global-set-key "\C-c\C-k" 'kill-region)
    #+END_SRC
