* Emacs config
  This file is tangled and the results are sources by =init.el= upon start. 

** Editing this file
*** Opening
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun config-visit ()
	(interactive)
	(find-file "~/.emacs.d/config.org"))
      (global-set-key (kbd "C-c c e") 'config-visit)
    #+END_SRC

*** Reloading
  #+BEGIN_SRC emacs-lisp :tangle yes
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c c r") 'config-reload)
  #+END_SRC

** Packages
   Setup package and add package archives.
  #+BEGIN_SRC emacs-lisp :tangle yes
    ;; Set up package 
    (require 'package)
    (setq package-archives
      '(("gnu"         . "http://elpa.gnu.org/packages/")
	("org"         . "http://orgmode.org/elpa/")
	("melpa"       . "http://melpa.org/packages/")))
    (package-initialize)
  #+END_SRC

*** Org Mode
**** Personal org file
     #+BEGIN_SRC emacs-lisp :tangle yes
       (defun org-visit ()
	 (interactive)
	 (find-file "~/org/main.org"))
       (global-set-key (kbd "C-c c o") 'org-visit)
     #+END_SRC
**** Some basic settings.
  #+BEGIN_SRC emacs-lisp :tangle yes
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
    (setq org-confirm-babel-evaluate nil)
    (setq org-export-with-smart-quotes t)
    (setq org-src-window-setup 'current-window)
    (add-hook 'org-mode-hook
	      '(lambda ()
		 (visual-line-mode 1)))
  #+END_SRC
**** Org bullets
  #+BEGIN_SRC emacs-lisp :tangle yes  
    (use-package org-bullets
      :ensure t
      :config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
  #+END_SRC

**** Org todo/agenda
  #+BEGIN_SRC emacs-lisp :tangle yes
    (setq org-todo-keywords
	  (quote ((sequence "TODO(t)" "|" "ABANDONED(b)" "DONE(d)"))))
    (setq org-log-done t)
    ;; Org capture
    (setq org-default-notes-file (concat org-directory "/remember.org"))
    (define-key global-map "\C-cr" 'org-capture)
    (global-set-key (kbd "C-c a") 'org-agenda)
  #+END_SRC

**** Org babel
  #+BEGIN_SRC emacs-lisp :tangle yes
    ;; Allow inline display of images
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)   
    (add-hook 'org-mode-hook 'org-display-inline-images)

    (add-to-list 'load-path (expand-file-name "el" user-emacs-directory))
    (use-package org
      :ensure t
      :config
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
	 (shell . t)
	 (R . t)
	 (julia . t)
	 (python . t)
	 (jupyter . t))))

    ;; Avoid conflicts with :async keyword
    (setq ob-async-no-async-languages-alist '("jupyter-python" 
					      "jupyter-julia"))

 #+END_SRC

**** Org Ref
 #+BEGIN_SRC emacs-lisp :tangle  yes
   (setq org-latex-prefer-user-labels t)
   (use-package org-ref
     :ensure t
     :config
     (setq reftex-default-bibliography '("~/plugg/bibliography/references.bib"))
     (setq org-ref-bibliography-notes "~/plugg/bibliography/notes.org"
	   org-ref-default-bibliography '("~/plugg/bibliography/references.bib")
	   org-ref-pdf-directory "~/plugg/bibliography/bibtex-pdfs/"))
 #+END_SRC
**** Org reveal
      #+BEGIN_SRC emacs-lisp :tangle yes
	(use-package ox-reveal
	  :ensure t)
      #+END_SRC

*** Flycheck
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package flycheck
	:ensure t
	:init
	(global-flycheck-mode t))
    #+END_SRC

*** Company 
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package company
	 :ensure t)
       (setq company-idle-delay 0.1)
       (setq company-tooltip-limit 10)
       (setq company-minimum-prefix-length 3)
       (setq company-tooltip-flip-when-above t)
       (add-hook 'after-init-hook 'global-company-mode)
     #+END_SRC
 
*** Ido
 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package flx-ido
     :ensure t)
   (ido-mode 1)
   (ido-everywhere 1)
   (flx-ido-mode 1)
   ;; disable ido faces to see flx highlights.
   (setq ido-enable-flex-matching t)
   (setq ido-use-faces nil)
 #+END_SRC

*** Smex
 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package smex
     :ensure t)
   (smex-initialize)
   (global-set-key (kbd "C-x C-m") 'smex)
   (global-set-key (kbd "M-X") 'smex-major-mode-commands)
 #+END_SRC

*** Magit
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package magit
       :ensure t
       :config
       (setq magit-diff-use-overlays nil)
       (global-set-key (kbd "C-x g") 'magit-status))
   #+END_SRC

*** Docker
    #+BEGIN_SRC emacs-lisp :tangle yes 
      (use-package docker
	:ensure t
	:bind ("C-c d" . docker))
    #+END_SRC

*** Projectile
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package projectile
	:ensure t
	:bind (:map projectile-mode-map
		    ("C-c p" . 'projectile-command-map))

	:config
	(projectile-mode +1))
    #+END_SRC

*** Avy
    Amazing tool for moving to that place that you want to be in a buffer. 
    Mnemonic for keybind is 'character query.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package avy
	:ensure t
	:bind
	("C-q" . avy-goto-char))
    #+END_SRC  

*** EIN
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package ein
	:ensure t)
    #+END_SRC

*** Telephone Line
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package telephone-line
	:ensure t)
      (telephone-line-mode)
    #+END_SRC

*** Yasnippet
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package yasnippet
	:ensure t)
    #+END_SRC
    
*** Language server
      #+BEGIN_SRC emacs-lisp :tangle yes
	 (use-package lsp-mode
	   :ensure t
	   :commands lsp
	   :custom
	   (lsp-enable-snippet 'f)
	   (lsp-auto-guess-root nil)
	   (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
	   :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
	   :hook ((python-mode c-mode c++-mode) . lsp))


	 (use-package lsp-ui
	   :after lsp-mode
	   :diminish
	   :commands lsp-ui-mode
	   :custom-face
	   (lsp-ui-doc-background ((t (:background nil))))
	   (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
	   :bind (:map lsp-ui-mode-map
		       ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
		       ([remap xref-find-references] . lsp-ui-peek-find-references)
		       ("C-c u" . lsp-ui-imenu))
	   :custom
	   (lsp-ui-doc-enable t)
	   (lsp-ui-doc-header t)
	   (lsp-ui-doc-include-signature t)
	   (lsp-ui-doc-position 'top)
	   (lsp-ui-doc-border (face-foreground 'default))
	   (lsp-ui-sideline-enable nil)
	   (lsp-ui-sideline-ignore-duplicate t)
	   (lsp-ui-sideline-show-code-actions nil)
	   :config
	   ;; Use lsp-ui-doc-webkit only in GUI
	   (setq lsp-ui-doc-use-webkit t)
	   ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
	   ;; https://github.com/emacs-lsp/lsp-ui/issues/243
	   (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
	     (setq mode-line-format nil)))


	(use-package company-lsp
	  :ensure t
	  :config
	  (setq compnay-lsp-enable-snippet t)
	  (push 'company-lsp company-backends))
      #+END_SRC

**** Hungry delete
     Avoids cleaning up white space.                   
      #+BEGIN_SRC emacs-lisp :tangle yes
	(use-package hungry-delete
	  :ensure t
	  :config
	  (global-hungry-delete-mode))
      #+END_SRC
*** Dashboard
    Remove the standard dashboard and add a new cool one.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package dashboard
	:ensure t)
      (setq inhibit-startup-screen t)
      (dashboard-setup-startup-hook)
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
      (setq dashboard-banner-logo-title "")
      (setq dashboard-startup-banner "~/.emacs.d/images/lambda.png")
      (add-to-list 'dashboard-items '(agenda) t)
      (setq show-week-agenda-p t)
      (setq dashboard-items '((recents  . 5)
			      (bookmarks . 5)
			      (agenda . 5)
			      (projects . 5)))
    #+END_SRC
*** Multiple Cursors
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package multiple-cursors
	:ensure t
	:bind 
	("C-c c l" . mc/edit-lines))
    #+end_src

*** Expand Region
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package expand-region
	:ensure t
	:bind 
	("C-0" . 'er/expand-region))
    #+end_src
<<<<<<< HEAD
*** Pdf-tools
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package pdf-tools
	:ensure t)
    #+END_SRC
*** Beacon
    #+BEGIN_SRC emacs-lisp :tangle yes 
      (use-package beacon
	:ensure t
	:config
	(beacon-mode 1))
    #+END_SRC

*** ESS
    #+BEGIN_SRC emacs-lisp :tangle yes 
      (use-package ess
	:ensure t)
    #+END_SRC
*** ZMQ
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package zmq
	:ensure t)
    #+END_SRC

*** Emacs-Jupyter
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package jupyter
	:ensure t)
    #+END_SRC

*** YAML mode
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package yaml-mode
	:ensure t)
    #+END_SRC

** Tweaks
*** Transparency
    #+BEGIN_SRC emacs-lisp :tangle yes
      ;(set-frame-parameter (selected-frame) 'alpha '(85 . 85))
      ;(add-to-list 'default-frame-alist '(alpha . (85 . 85))) 
    #+END_SRC

*** Terminal
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defvar term-shell "/bin/bash")
      (global-set-key (kbd "<C-return>") 'term)
    #+END_SRC

*** Utf-8
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq locale-coding-system 'utf-8)
      (set-terminal-coding-system 'utf-8)
      (set-keyboard-coding-system 'utf-8)
      (set-selection-coding-system 'utf-8)
      (prefer-coding-system 'utf-8)
    #+END_SRC
    
*** Remove clutter
    Emacs truly comes with a lot of unnecessary stuff, and that stuff 
    has to go for more screen real estate.

**** Remove all bars
    #+BEGIN_SRC emacs-lisp :tangle yes
      (menu-bar-no-scroll-bar)
      (tool-bar-mode 0)
      (menu-bar-mode 0)
      (set-face-attribute 'vertical-border nil :foreground "#282828")
    #+END_SRC

*** Stop Emacs backups
    Ok fine. It can make backup files, but at one location.
    #+BEGIN_SRC emacs-lisp :tangle yes
      ;; Do not clutter everything with .file~
      (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
    #+END_SRC

*** Open links in Firefox
    Instead of default chrome.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq browse-url-browser-function 'browse-url-firefox
	    browse-url-new-window-flag  t)
    #+END_SRC

*** Configure cursor
    Make the cursor more minimalistic. Since cursors in inactive buffers 
    don't work with dimmer, they're not shown. 
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default cursor-in-non-selected-windows nil)
      (blink-cursor-mode 0)
      (setq-default cursor-type 'bar)
    #+END_SRC

*** Theme
    Zenburn theme <3
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package zenburn-theme
	:ensure t
	:init
	(setq zenburn-use-variable-pitch t)
	(setq zenburn-scale-org-headlines t)
	(setq zenburn-scale-outline-headlines t))
    #+END_SRC

*** Smoother scrolling
    This makes the buffer content "stream" in and out of focus instead of the default janky jumps.
    #+BEGIN_SRC emacs-lisp :tangle yes
       (setq scroll-conservatively 100)
    #+END_SRC

*** Yes-or-no-prompts
    No need to ever be verbose again. Simplify confirmation prompts.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defalias 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

*** Ignore bell
    Useful on Windows I guess.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq ring-bell-function 'ignore)
    #+END_SRC

*** Follow splits
    To avoid unnecessary =C-2 C-o= or =C-3 C-o= everytime I split a window.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun split-and-follow-horizontally ()
	(interactive)
	(split-window-below)
	(balance-windows)
	(other-window 1))
      (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

      (defun split-and-follow-vertically ()
	(interactive)
	(split-window-right)
	(balance-windows)
	(other-window 1))
      (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
    #+END_SRC

*** Always kill current buffer 
    To avoid unnecessary confirmation when doing =C-x k= which I have never used to kill 
    a buffer I am not currently in.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun kill-current-buffer ()
	"Kills the current buffer."
	(interactive)
	(kill-buffer (current-buffer)))
      (global-set-key (kbd "C-x k") 'kill-current-buffer)
    #+END_SRC

*** Custom keybinds
    #+BEGIN_SRC emacs-lisp :tangle yes
      (global-set-key "\C-w" 'backward-kill-word)
      (global-set-key "\C-x\C-k" 'kill-region)
      (global-set-key "\C-c\C-k" 'kill-region)
    #+END_SRC

*** Show parens
    #+BEGIN_SRC emacs-lisp :tangle yes
      (show-paren-mode 1)
    #+END_SRC

*** Spell checking
    #+BEGIN_SRC emacs-lisp :tangle yes
      (add-hook 'text-mode-hook 'turn-on-auto-fill)
      (add-hook 'text-mode-hook 'flyspell-mode)
      ;(add-hook 'latex-mode-hook 'flyspell-mode)
    #+END_SRC
